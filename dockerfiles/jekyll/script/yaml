#!/usr/bin/env ruby
# Copyright 2015 Jordon Bedwell (EnvyGeeks)
# Taken from envygeeks/docker

#!/usr/bin/env ruby
require "json"
require "optparse"
require "yaml"

if ARGV[0] == "update" && ARGV.shift
  opts = {
    :file => "opts.yml",
  }

  OptionParser.new do |o|
    o.banner = "Usage: #{__FILE__} update [opts]"
    o.on("-f", "--file [FILE]", "The file to parse; default: opts.yml") do |v|
      opts[:file] = v
    end
  end.parse!

  if !File.file?(opts[:file])
    abort "Cannot find #{opts[:file]}"

  else
    path = ARGV.shift
    data = YAML.load_file(opts[:file])
    keys = path.split(".")
    if keys.size > 1
      hash = data[keys[0]] ||= {}
      keys[1..-2].each do |k|
        hash = hash[k] ||= \
          {}
      end
    else
      hash = data
    end

    if hash[keys.last].is_a?(Array) && hash[keys.last] ||= []
      then hash[keys.last].push(
        *ARGV
      )

    else
      hash[keys.last] = \
        ARGV.size > 1 ? ARGV[0..-1] : \
          ARGV[0]
    end

    File.write(opts[:file], \
      data.to_yaml)
  end
else
  opts = {
    :base => false,
    :file => "opts.yml",
    :keys => false,
  }

  OptionParser.new do |o|
    o.on("-f", "--file [FILE]", "The file to parse.") { |v| opts[:file] = v.strip }
    o.on("-V", "--verify [KEY]", "Verify value.") { |k| opts[:verify] = k.to_s.strip }
    o.on("-k", "--key", "Verify By or Print key(s).") { opts[:keys] = true }
    o.banner = "Usage: #{__FILE__} [opts]"
  end.parse!

  if !File.file?(opts[:file])
    abort "Unable to find #{
      opts[:file]
    }"

  else
    data = YAML.load_file(opts[:file])
    path = ARGV.first

    if opts[:verify] && opts[:verify] =~ /\.\Z/
      abort

    elsif path =~ /\.\Z/
      exit

    elsif opts[:verify] && !ARGV[0]
      if (verify_path = opts[:verify].split(".")).size > 1
        exec $0, "-f #{opts[:file]}", "-#{opts[:keys] ? "k" : ""}V #{ \
          verify_path.last}", verify_path[0..-2].join(".")

      else
        data.has_key?(verify_path.first) ? \
          exit : abort
      end

    elsif path && (keys = path.split(".") rescue []).size > 0
      keys.each { |k| exit if k == "" || !(data = data[k]) }

      if (opts[:verify] && opts[:keys]) || (opts[:verify] && data.is_a?(Array))
        (data.is_a?(Array) && data.include?(opts[:verify])) || (data.is_a?( \
          Hash) && data.has_key?(opts[:verify])) ? exit : abort

      elsif opts[:verify]
        opts[:verify] == data ? \
          exit : abort

      elsif data.is_a?(Hash) && !opts[:keys]
        out = ""; data.each do |k, v|
          if v.is_a?(Array)
            v = v.join(
              " "
            )
          end

          out << "\n#{k}=#{v}"
        end

        $stdout.puts \
          out.strip

      elsif data.is_a?(Hash) && opts[:keys]
        $stdout.puts data.keys.join(
          " "
        )

      elsif !path
        exit

      else
        $stdout.puts [data].\
          flatten.join " "
      end
    end
  end
end
