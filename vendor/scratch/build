#!/bin/sh

set -e
tmpdir=$(mktemp -d)
root=$(cd "$(dirname $0)/.."; pwd)
parent_root=$(cd "$(dirname "$(readlink -f $0)")/../.."; pwd)
. $parent_root/vendor/script/helpers
repo="$(cd $root; basename "$(pwd)")"
yml=$parent_root/script/yml
[ "$DEBUG" ] && set -x
cd $root

if [ $# -eq 1 ]; then build=$1; elif [ $# -gt 0 ]; then
  for v in "$@"; do
    $0 "$v"
  done
  exit
fi

rel() {
  echo $1 | sed -r "s|^/tmp/||"
}

get_release() {
  release=$($yml releases.$tag)
  if [ -z "$release" ]; then
    release=$(
      $yml releases.$type
    )
  fi

  if [ -z "$release" ]; then
    release=$(
      $yml releases.all
    )
  fi
}

_trap() {
  status=$?
  trap - EXIT
  teardown

  rm -rf "$(rel $tmpdir)"
  docker rmi -f rootfs > /dev/null 2>&1 || true
  exit $status
}

setup() {
  mkdir -p copy/$type
  mkdir -p copy/$repo
  mkdir -p copy/$tag
  mkdir -p cache
  return 0
}

teardown() {
  [ -z "$(ls -A copy/$type 2> /dev/null)" ] && rm -rf copy/$type
  [ -z "$(ls -A copy/$repo 2> /dev/null)" ] && rm -rf copy/$repo
  [ -z "$(ls -A copy/$tag  2> /dev/null)" ] && rm -rf copy/$tag
  [ -z "$(ls -A cache      2> /dev/null)" ] && rm -rf cache
  return 0
}

write_env() {
  echo "CI=$CI" >> $env_file
  echo "DEBUG=$DEBUG" >> $env_file
  echo "TRAVIS=$TRAVIS" >> $env_file
  echo "CACHE_DIR=$cache_dir" >> $env_file
  echo "COMMON_DIR=$common_dir" >> $env_file
  echo "ARCHIVE_TAR=$archive_tar" >> $env_file
  echo "COPY_REPO_DIR=$copy_repo_dir" >> $env_file
  echo "PACKAGES=$($yml pkgs.all) $($yml pkgs.$tag) $($yml pkgs.$type)" >> $env_file
  echo "COPY_TYPE_DIR=$copy_type_dir" >> $env_file
  echo "COPY_TAG_DIR=$copy_tag_dir" >> $env_file
  echo "RELEASE=$release" >> $env_file
  echo "REPO=$repo" >> $env_file
  echo "TYPE=$type" >> $env_file
  echo "USER=$user" >> $env_file
  echo "TAG=$tag" >> $env_file
  $yml -f opts.yml env >> \
    $env_file
}

trap -- _trap QUIT TERM INT EXIT
rootfs_dockerfile=$(rel $tmpdir)/$(rel "$(mktemp -u)")
       dockerfile=$(rel $tmpdir)/$(rel "$(mktemp -u)")
         env_file=$(rel $tmpdir)/$(rel "$(mktemp -u)")

  # copy_repo: copy/$repo folder
  # common: vendor/common (from main root)
  # archive: The tar.gz file you write to.
  # copy_type: copy/$type folder
  # copy_tag: copy/$tag folder
  # release: releases/* file
  # cache: cache/ folder.

   common_dir=$(mktemp --tmpdir=$tmpdir -u)
 copy_tag_dir=$(mktemp --tmpdir=$tmpdir -u)
copy_repo_dir=$(mktemp --tmpdir=$tmpdir -u)
copy_type_dir=$(mktemp --tmpdir=$tmpdir -u)
  archive_tar=$(mktemp --tmpdir=$tmpdir -u)
    cache_dir=$(mktemp --tmpdir=$tmpdir -u)

mkdir -p "$(rel $tmpdir)"
cp -R $parent_root/vendor/common "$(rel $common_dir)"
cp $parent_root/vendor/scratch/rootfs $rootfs_dockerfile
printf "Building the temporary rootfs image %s\n" "rootfs:$repo"
docker build -f $rootfs_dockerfile -t "rootfs:$repo" .
rm -rf $rootfs_dockerfile
unset   rootfs_dockerfile
clear_screen \
  "rootfs:$repo"

for tag in $($yml -k tags); do
  type=$($yml tags.$tag)
  get_release

  if [ "$build" ] && [ "$tag" != "$build" ]; then
    continue
  fi

  touch "$(rel $archive_tar)"
  printf_green "Building the image %s\n" $user/$repo:$tag
  setup

  write_env
  run_yellow docker run --rm \
    --volume=$root/cache:$cache_dir \
    --volume="$root/$(rel $archive_tar):$archive_tar" \
    --volume="$root/$(rel  $common_dir):$common_dir:ro" \
    --volume=$root/copy/$type:$copy_type_dir:ro \
    --volume=$root/copy/$tag:$copy_tag_dir:ro \
    --volume=$root/copy/$repo:$copy_repo_dir:ro \
    --env-file=$env_file \
    -it rootfs:$repo

  cp $parent_root/vendor/scratch/scratch $dockerfile
  entry=$($yml entries.$tag)
  [ "$entry" ] || entry=$($yml entries.$type)
  [ "$entry" ] || entry=$($yml entries.all)
  printf "\nADD %s /" "$(rel $archive_tar)" >> $dockerfile
  [ "$entry" ] && printf "\nENTRYPOINT [\"%s\"]" \
    "$entry" >> $dockerfile

  teardown
  docker build -f $dockerfile -t $user/$repo:$tag .
  rm -rf "$(rel $archive)" $dockerfile
  clear_screen $user/$repo:$tag
done

# Just to cleanup.
docker rmi -f "rootfs:$repo" || true
clear_screen
