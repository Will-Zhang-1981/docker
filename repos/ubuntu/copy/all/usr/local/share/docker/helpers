#!/bin/sh
[ "$DEBUG" ] && set -x
set -e

# --
# @echo Nothing
# Outputs the operating system from /etc/os-release so we can detect features.
# @output 0
# --
operating_system() {
  echo "$(sh -c '. /etc/os-release; echo $ID')"
}

# --

os() {
  operating_system
}

# --
# @echo Nothing
# Take in a username:uid and check if a user exists.
# You can also just send username.
# @return 0|1
# --
user_exists() {
  canonical=$(echo $1 | awk -F: '{ print $1 }')
  uid=$(echo $1 | awk -F: '{ print $2 }')
  exec >/dev/null 2>&1

  if [ "$uid" ]
    then if getent passwd "$canonical" && getent passwd "$uid"
      then return 0
      else return 1
    fi
  elif getent passwd "$canonical"
    then return 0
    else return 1
  fi
}

# --
# @echo Nothing
# Take in a group:group and check if a group exists.
# You can also just send group.
# @return 0|1
# --
group_exists() {
  local canonical=$(echo $1 | awk -F: '{ print $1 }')
  local gid=$(echo $1 | awk -F: '{ print $2 }')

  if [ "$gid" ]
    then if getent group "$canonical" && getent group "$gid"
      then return 0
      else return 1
    fi
  elif getent group "$canonical"
    then return 0
    else return 1
  fi
}

# --
# @echo Nothing
# Add a user across the platform lines.
# @return 0|1
# --
add_system_users() {
  for string in "$@"; do
    local canonical=$(echo $string | awk -F: '{ print $1 }')
    local uid=$(echo $string | awk -F: '{ print $2 }')
    local gid=$(echo $string | awk -F: '{ print $3 }')
    [ -z "$gid" ] && local gid=$uid

    #

    if [ "$(os)" = ubuntu ]; then
      addgroup --gid "$gid" "$canonical"
      adduser  --gid "$gid" --uid "$uid" --shell /bin/bash \
        --system "$canonical"

    else
      addgroup -g "$gid" "$canonical"
      adduser  -s /bin/bash -G "$canonical" -u "$uid" -D "$canonical"
      sed -ri "s!:Linux User,{3}:!:linux-user:!" /etc/passwd
      mkdir -p "/home/$canonical"
    fi
  done
}

# --
# @echo Nothing
# Cleans up common files we don't want hanging around on the image.
# @return 0
# --
cleanup() {
  if [ -z "$1" ]
    then base_dir=
    else base_dir=$(
      echo $1 | sed -r 's/\/$//'
    )
  fi

  find "$base_dir/" -type f -iname \*.dpkg-dist -delete
  find "$base_dir/" -type f -iname \*.apk-new   -delete
  find "$base_dir/" -type d -name .gem -print0 | xargs -0 rm -rf
  find "$base_dir/usr/src" ! -path "$base_dir/usr/src" 2> /dev/null \
    -delete || true

  rm -rf "$base_dir/var/cache/apt/"*
  rm -rf "$base_dir/var/cache/apk/"*
  rm -rf "$base_dir/var/lib/apt/lists/"*
  rm -rf "$base_dir/opt/jekyll/lib/ruby/gems/"*/cache/*
  rm -rf "$base_dir/usr/lib/ruby/gems/"*/cache/*
  rm -rf "$base_dir/usr/local/lib/ruby/gems/"*/cache/*
  rm -rf "$base_dir/var/lib/gems/"*/cache/*

  rm -rf "$base_dir/etc/hosts" 2> /dev/null || true
  rm -rf "$base_dir/etc/host"  2> /dev/null || true
  rm -rf "$base_dir/etc/mtab"  2> /dev/null || true

  rm -rf "$base_dir/etc/cron.weekly"
  rm -rf "$base_dir/etc/cron.daily"
  rm -rf "$base_dir/etc/motd.d"
  rm -rf "$base_dir/etc/motd"
  rm -rf "$base_dir/etc/inittab"
  rm -rf "$base_dir/etc/initab"
  rm -rf "$base_dir/etc/fstab"
  rm -rf "$base_dir/etc/crontabs"
  rm -rf "$base_dir/etc/modules"
  rm -rf "$base_dir/etc/modules-load.d"
  rm -rf "$base_dir/etc/sysctl.conf"
  rm -rf "$base_dir/etc/rc.local"
  rm -rf "$base_dir/etc/acpi"
  rm -rf "$base_dir/etc/init"
  rm -rf "$base_dir/etc/rmt"
  rm -rf "$base_dir/etc/rc0.d"
  rm -rf "$base_dir/etc/rc1.d"
  rm -rf "$base_dir/etc/rc2.d"
  rm -rf "$base_dir/etc/rc3.d"
  rm -rf "$base_dir/etc/rc4.d"
  rm -rf "$base_dir/etc/rc5.d"
  rm -rf "$base_dir/etc/rc6.d"
  rm -rf "$base_dir/etc/rcS.d"
  rm -rf "$base_dir/etc/conf.d"
  rm -rf "$base_dir/etc/init.d"
  rm -rf "$base_dir/etc/sysctl.d"
  rm -rf "$base_dir/etc/runlevels"
  rm -rf "$base_dir/etc/modprobe.d"
  rm -rf "$base_dir/etc/logrotate.d"
  rm -rf "$base_dir/etc/network"
  rm -rf "$base_dir/etc/periodic"
  rm -rf "$base_dir/etc/rc.conf"
  rm -rf "$base_dir/etc/local.d"
  rm -rf "$base_dir/etc/service"
  rm -rf "$base_dir/etc/sv"
  rm -rf "$base_dir/media"
  rm -rf "$base_dir/mnt"

  rm -rf "$base_dir/run/network"
  rm -rf "$base_dir/var/spool/cron"
  rm -rf "$base_dir/run/sendsigs.omit.d"
  rm -rf "$base_dir/run/resolvconf"
  rm -rf "$base_dir/run/shm"

  find "$base_dir/tmp" ! -path "$base_dir/tmp" \
    ! -iname bats.\*.src -delete
}

# --
# @echo Nothing
# Enables the Docker stdout logger that is by default disabled.
# @return 0
# --
enable_stdout_logger() {
  mkdir -p /etc/stdout.d
  cp -R /usr/local/share/docker/templates.d/startup2.d/stdout \
    /etc/startup2.d
}

# --
# @echo Nothing
# Install and remove wget from the system without worrying about it yourself.
# @return 0
# --
___helpers_install_wget() {
  if [ "$(operating_system)" = "alpine" ]
    then apk --update add wget
    else apt-get install \
      --no-install-recommends -y wget
  fi
}

# --

___helpers_remove_wget() {
  if [ "$(operating_system)" = "alpine" ]
    then apk del wget
    else apt-get autoremove wget \
      --purge -y
  fi
}

# --
# @echo Nothing
# Allows you to download with wget using a cookie (useful for Java)
# @return 0
# --
cookie_dl() {
  __helpers_install_wget
        wget -nv --header "Cookie: $2" $1
  __helpers_remove_wget
}

# --
# Allows you to download with wget in a single shot.
# @echo Nothing
# @return 0
# --
download() {
  __helpers_install_wget
        wget -nv $1
  __helpers_remove_wget
}

# --
# @echo On Bad checksum.
# Compares a sha256 sum when you send your file and the sum.
# @return 1 | 0
# --
test_sha() {
  if ! test "$(sha256sum $1 |cut -d' ' -f1)" = "$2"; then
    >&2 echo "Bad Download!"
    exit 1
  fi
}

# --
# @echo Nothing
# Creates an chowns a log file on your behalf.
# @return 0
# --
create_log() {
  dir=$(dirname $2)
  if [ "$dir" != "." ]; then
    mkdir -p /var/log/$dir
    chown $1 /var/log/$dir
  fi

  touch /var/log/$2
  chown $1 /var/log/$2
}

# --
# @echo Nothing
# Creates a directory with the specific user in one shot.
# @example create_dir owner folder a+rX
# @return 0
# --
create_dir() {
  mkdir -p $2
  chown $1 $2

  if [ "$3" ]
    then chmod $3 $2
  fi
}

# --
# @echo Nothing
# Modifies a users GID and UID to your preference and fixes their files.
# @return 0
# --
reset_users() {
  sed -ri "s!:Linux User,{3}:!:linux-user:!" /etc/passwd

  for u in "$@"; do
    canonical=$(echo $u | awk -F: '{ print $1 }')
      new_uid=$(echo $u | awk -F: '{ print $2 }')
      new_gid=$new_uid

    # We pull out the current users gid so that we can make
    # sure that they match before we alter the user entirely,
    # we do not alter non-canonical-matches.

    old_gid=$(getent group $canonical | awk -F: '{ print $3 }')
    users_current_gid=$(getent passwd $canonical | awk -F: '{ print $4 }')
    old_uid=$(getent passwd $canonical | awk -F: '{ print $3 }')

    # Replace the canonical group and user with the new
    # requested ID, this doesn't affect what happens when we
    # double check to make sure they match on the user.

    sed -ri "s/^$canonical:x:$old_uid/$canonical:x:$new_uid/" /etc/passwd
    sed -ri "s/^$canonical:x:$old_gid/$canonical:x:$new_gid/" /etc/group

    # We only replace the users GID if they have the
    # current GID that they should have by default.  Users
    # can do what they like on Linux though so we don't alter
    # it if it's not a canonical match.

    if [ "$old_gid" = "$users_current_gid" ]; then
      sed -ri "s/^$canonical:x:$new_uid:$old_gid/$canonical:x:$new_uid:$new_gid/" /etc/passwd
      find / -group $old_gid \
          -not -path '/proc/*' \
          -not -path '/sys/*' \
          -not -path '/cdrom/*' \
          -not -path '/dev/*' \
        -exec chgrp -h $new_gid '{}' \+
    fi

    #

    find / -user $old_uid \
        -not -path '/proc/*' \
        -not -path '/sys/*' \
        -not -path '/cdrom/*' \
        -not -path '/dev/*' \
      -exec chown -h $new_uid '{}' \+
  done
}

# --

reset_user() {
  reset_users "$@"
}

# --

add_user_1000() {
  add_system_users $1:1000:1000
}

# --
# @echo UID (from `stat`)
# Gives you the UID of a file so that you can get work done.
# @return 0
# --
get_file_uid() {
  echo $(stat -c '%u' $1)
}

# --

. /usr/local/share/docker/helpers.d/pkg
. /usr/local/share/docker/helpers.d/apt
. /usr/local/share/docker/helpers.d/apk
. /usr/local/share/docker/helpers.d/ruby
