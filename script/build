#!/bin/sh

# Provides a means to build any image inside of this repository (via
# dockerfiles) or any images for that matter. Some images provide a recipe and
# if those images provide a recipe it gets used.
#
# script/build -u user repo
# script/build -u user repo:tag
# script/build repo:tag
# script/build repo

root=$(cd "$(dirname "$(readlink -f $0)")/.."; pwd)
. $root/vendor/script/helpers
[ "$DEBUG" ] && set -x
yml=$root/script/yml
set -e

build() {
  printf_green "Building the image %s\n" $1
  run_yellow docker build -t $1 .
  clear_screen "$1"
}

if [ $# -eq 1 ] && [ "$1" = "travis" ]; then
  $0 $DOCKER_REPO

elif [ $# -eq 1 ]; then
  parse_repository "$1" # repo part
  folder="$root/dockerfiles/$repo"
  if [ -d "$folder" ]; then
    cd "$folder"

    parse_repository "$1" # user, repo and tag part.
    if [ -x script/build ]; then script/build -u $current_user $tag
    elif [ "$tag" ] && [ -f opts.yml ] && $yml -R tags && $yml -V $tag tags; then
      [ -f script/sync ] && script/sync; if [ -d "tags/$tag" ]; then
        cd tags/$tag
        build $current_user/$repo:$tag \
          .
      else
        >&2 printf_red "Unable to find the tag: %s" $tag
        exit 1
      fi

    elif [ "$tag" ]; then
      >&2 printf_red "Nonexistant tag: %s\n" \
        $tag; exit 1

    elif [ -f opts.yml ] && $yml -R tags; then
      [ -f script/sync ] && script/sync; for v in $($yml -k tags); do
        cd $root/dockerfiles/$repo/tags/$v && build \
            $current_user/$repo:$v .
      done

    else
      tag=${tag:-latest}
      build $current_user/$repo:$tag \
        .
    fi
  else
    >&2 echo_red "No repository."
    exit 1
  fi
elif [ $# -gt 1 ]; then
  for v in "$@"; do
    $0 $v
  done
else
  for v in dockerfiles/*; do
    $0 "$(basename $v)"
  done
fi
