#!/bin/sh

# Provides a means to push both manually-built images and automatic images that
# are triggered after a CI build with the following syntax:
#
# * script/push by-trigger
# * script/push user/repo:tag
# * script/push repo:tag
# * script/push repo

[ "$DEBUG" ] && set -x
root=$(cd "$(dirname "$(readlink -f $0)")/.."; pwd)
. $root/vendor/script/helpers
set -e

push() {
  for i in 1 2 3; do
    if [ $i -gt 1 ]
      then printf "\nRetrying to push  %s\n" $1
      else printf "\nPushing %s to Docker\n" $1
    fi

    docker push $1 && break
    clear_screen
  done
}

if [ "$CI" ] && [ -z "$SKIP_LOGIN" ]; then
  docker login -e="$DOCKER_EMAIL" -u="$DOCKER_USERNAME" \
    -p="$DOCKER_PASSWORD" > /dev/null 2>&1 <&- || {
      >&2 echo "Unable to login."
      exit 1
    }
fi

if [ $# -eq 1 ]; then
  if [ "$1" = "ci-images" ]; then
    $0 $DOCKER_REPO

  elif [ "$1" = "by-trigger" ]; then
    if [ "$CI" ]; then
      for v in dockerfiles/*; do
        cd $root

        if [ -d $v ] && [ -f $v/trigger.enc ]; then
          cd $v

          data=$(openssl aes-256-cbc -k "$TRIGGER_KEY" -in trigger.enc -d)
          build_on=$(echo $data | awk -F: '{ print $1 }')
               key=$(echo $data | awk -F: '{ print $2 }')
             repo="$(basename "$(pwd)")"

          if [ "$build_on" = "$DOCKER_REPO" ]; then
            curl -H "Content-Type: application/json" --data '{ "build": true }' -X POST \
              https://registry.hub.docker.com/u/$user/$repo/trigger/$key/ 1> /dev/null 2>&1 || {
                printf "There was an error pushing %s.\n" $repo
                exit 1
              }

            printf "Triggered %s\n" \
              $repo
          fi
        fi
      done
    else
      echo "This feature is for CI's"
      exit 1
    fi
  else
    parse_repository "$1"
    if [ "$repo" ] && [ -d "dockerfiles/$repo" ]; then
      cd dockerfiles/$repo

      if [ -x script/push ]; then
        script/push $tag

      elif [ "$tag" ]; then
        image=$current_user/$repo:$tag
        if echo "$(images_with_tags)" | grep -qE "^$image\$"; then
          push $image
        else
          >&2 printf "%s doesn't exist in a built state.\n" \
            "$image"
          exit 1
        fi

      elif [ -f auto ]; then
        echo "Feature unavailable."

      else
        for v in $(available_images_with_tags $current_user $repo); do
          push $v
        done
      fi
    else
      >&2 printf "Unknown repo %s" $repo
      exit 1
    fi
  fi
elif [ $# -gt 1 ]; then
  for v in "$@"; do
    $0 $v
  done
else
  for v in dockerfiles/*; do
    $0 "$(basename $v)"
  done
fi
